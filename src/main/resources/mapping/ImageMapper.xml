<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.doubles.dao.ImageMapper" >
  <cache eviction="LRU" flushInterval="10800000"  size="512" readOnly="true" />
  <resultMap id="BaseResultMap" type="com.doubles.entity.Image" >
    <id column="img_id" property="imgId" jdbcType="VARCHAR" />
    <result column="album_id" property="albumId" jdbcType="VARCHAR" />
    <result column="img_path" property="imgPath" jdbcType="VARCHAR" />
    <result column="img_describe" property="imgDescribe" jdbcType="VARCHAR" />
    <result column="like_number" property="likeNumber" jdbcType="INTEGER" />
    <result column="collect_number" property="collectNumber" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    img_id, album_id, img_path, img_describe, like_number, collect_number, create_time, 
    update_time
  </sql>
  <select id="selectByAlbum" resultMap="BaseResultMap" parameterType="java.lang.String">
    select
    <include refid="Base_Column_List" />
    from image
    WHERE album_id = #{albumId} ORDER BY create_time DESC
  </select>

  <select id="getImagePageByAlbum" resultMap="BaseResultMap" parameterType="java.lang.String">
    select
    <include refid="Base_Column_List" />
    from image
    WHERE album_id = #{albumId} ORDER BY create_time DESC
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.doubles.entity.ImageExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from image
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from image
    where img_id = #{imgId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from image
    where img_id = #{imgId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.doubles.entity.ImageExample" >
    delete from image
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.doubles.entity.Image" >
    <selectKey keyProperty="imgId" resultType="String" order="BEFORE">
      select replace(uuid(),'-','') from dual
    </selectKey>
    insert into image (img_id, album_id, img_path, 
      img_describe, like_number, collect_number, 
      create_time, update_time)
    values (#{imgId,jdbcType=VARCHAR}, #{albumId,jdbcType=VARCHAR}, #{imgPath,jdbcType=VARCHAR}, 
      #{imgDescribe,jdbcType=VARCHAR}, #{likeNumber,jdbcType=INTEGER}, #{collectNumber,jdbcType=INTEGER}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.doubles.entity.Image" >
    <selectKey keyProperty="imgId" resultType="String" order="BEFORE">
      select replace(uuid(),'-','') from dual
    </selectKey>
    insert into image
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="imgId != null" >
        img_id,
      </if>
      <if test="albumId != null" >
        album_id,
      </if>
      <if test="imgPath != null" >
        img_path,
      </if>
      <if test="imgDescribe != null" >
        img_describe,
      </if>
      <if test="likeNumber != null" >
        like_number,
      </if>
      <if test="collectNumber != null" >
        collect_number,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="imgId != null" >
        #{imgId,jdbcType=VARCHAR},
      </if>
      <if test="albumId != null" >
        #{albumId,jdbcType=VARCHAR},
      </if>
      <if test="imgPath != null" >
        #{imgPath,jdbcType=VARCHAR},
      </if>
      <if test="imgDescribe != null" >
        #{imgDescribe,jdbcType=VARCHAR},
      </if>
      <if test="likeNumber != null" >
        #{likeNumber,jdbcType=INTEGER},
      </if>
      <if test="collectNumber != null" >
        #{collectNumber,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.doubles.entity.ImageExample" resultType="java.lang.Integer" >
    select count(*) from image
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update image
    <set >
      <if test="record.imgId != null" >
        img_id = #{record.imgId,jdbcType=VARCHAR},
      </if>
      <if test="record.albumId != null" >
        album_id = #{record.albumId,jdbcType=VARCHAR},
      </if>
      <if test="record.imgPath != null" >
        img_path = #{record.imgPath,jdbcType=VARCHAR},
      </if>
      <if test="record.imgDescribe != null" >
        img_describe = #{record.imgDescribe,jdbcType=VARCHAR},
      </if>
      <if test="record.likeNumber != null" >
        like_number = #{record.likeNumber,jdbcType=INTEGER},
      </if>
      <if test="record.collectNumber != null" >
        collect_number = #{record.collectNumber,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null" >
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update image
    set img_id = #{record.imgId,jdbcType=VARCHAR},
      album_id = #{record.albumId,jdbcType=VARCHAR},
      img_path = #{record.imgPath,jdbcType=VARCHAR},
      img_describe = #{record.imgDescribe,jdbcType=VARCHAR},
      like_number = #{record.likeNumber,jdbcType=INTEGER},
      collect_number = #{record.collectNumber,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.doubles.entity.Image" >
    update image
    <set >
      <if test="albumId != null" >
        album_id = #{albumId,jdbcType=VARCHAR},
      </if>
      <if test="imgPath != null" >
        img_path = #{imgPath,jdbcType=VARCHAR},
      </if>
      <if test="imgDescribe != null" >
        img_describe = #{imgDescribe,jdbcType=VARCHAR},
      </if>
      <if test="likeNumber != null" >
        like_number = #{likeNumber,jdbcType=INTEGER},
      </if>
      <if test="collectNumber != null" >
        collect_number = #{collectNumber,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where img_id = #{imgId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.doubles.entity.Image" >
    update image
    set album_id = #{albumId,jdbcType=VARCHAR},
      img_path = #{imgPath,jdbcType=VARCHAR},
      img_describe = #{imgDescribe,jdbcType=VARCHAR},
      like_number = #{likeNumber,jdbcType=INTEGER},
      collect_number = #{collectNumber,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where img_id = #{imgId,jdbcType=VARCHAR}
  </update>
</mapper>